{"version":3,"sources":["models/Task.ts","components/Form.tsx","components/TaskList.tsx","components/App.tsx","index.tsx"],"names":["colorsItems","Task","id","description","isDone","isEditing","hexColorPos","this","getColorPosition","exeption","min","Math","ceil","max","floor","length","randomNumber","random","FormUser","dispatch","useState","value","setValue","onSubmit","e","preventDefault","Date","getTime","task","console","log","hS","action","Action","AddTask","className","type","placeholder","name","autoComplete","maxLength","onChange","target","getIconCustom","icon","color","Provider","size","TaskList","list","ls","tasksObject","itemBase","item","onClick","DeleteTask","onClickDelete","i","copyWith","EditTask","onClickEdit","map","tasks","listColors","currentColor","pos","colorPosUsed","getListColors","style","backgroundImage","key","ItemEdit","reducer","state","currentList","index","findIndex","splice","indexEdit","Error","App","defaultValue","fromStorage","tasksToUse","forEach","push","initialState","useReducer","Form","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e279c69.chunk.js","sourcesContent":["type TaskType = {\r\n    id?: string\r\n    description?: string\r\n    isDone?: boolean\r\n    isEditing?: boolean\r\n    hexColorPos?: number\r\n\r\n}\r\n\r\nexport const colorsItems = [\r\n    //Deep, Light\r\n    //Purple red\r\n    [\"#9901ff8e\", \"#9900ff\"],\r\n    [\"#a80404\", \"#ff0000\"],\r\n    [\"#b15f02\", \"#ff8800\"],\r\n    [\"#0162ff\", \"#0046b6\"],\r\n    [\"#aa02a1\", \"#ff00f2\"],\r\n    [\"##17c300\", \"#1eff00\"],\r\n]\r\n\r\n\r\nclass Task {\r\n\r\n    readonly id: string\r\n    readonly description: string\r\n    readonly isDone: boolean\r\n    readonly isEditing: boolean\r\n    readonly hexColorPos: number\r\n    //Stores the number in the array\r\n    //This values is initialized when the values is going to render\r\n\r\n    constructor(id: string, description: string, isDone = false, isEditing = false) {\r\n        this.id = id\r\n        this.description = description\r\n        this.isDone = isDone\r\n        this.isEditing = isEditing\r\n        this.hexColorPos = this.getColorPosition()\r\n    }\r\n\r\n    //id?: string, description?: string, isDone?: boolean\r\n    public copyWith({ id, description, isDone, isEditing }: TaskType): Task {\r\n        return new Task(id ?? this.id, description ?? this.description, isDone ?? this.isDone, isEditing ?? this.isEditing)\r\n    }\r\n\r\n\r\n\r\n    //Generates a ramdom number\r\n    public getColorPosition(exeption?: number): number {\r\n\r\n        const min = Math.ceil(0);\r\n        //The last position generates an error\r\n        const max = Math.floor(colorsItems.length - 1)\r\n\r\n        const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min\r\n\r\n        if (!exeption) return randomNumber\r\n\r\n        if (randomNumber === exeption)\r\n            return this.getColorPosition(exeption)\r\n\r\n        return randomNumber\r\n\r\n    }\r\n}\r\n\r\nexport default Task","import React, { useState } from 'react'\r\nimport Task from '../models/Task'\r\nimport { Action, HandleState } from './App'\r\n\r\nconst FormUser = ({ dispatch }: { dispatch: React.Dispatch<HandleState> }) => {\r\n\r\n    const [value, setValue] = useState('')\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        //Avoid to refresh the page\r\n        e.preventDefault()\r\n\r\n        if (value.length === 0)\r\n            return\r\n\r\n        //Creating the data to add to list\r\n        const id = 'id_' + (new Date()).getTime();\r\n\r\n        const task = new Task(id, value)\r\n\r\n        console.log(`Value sent: ${value}`)\r\n\r\n        const hS: HandleState = {\r\n            action: Action.AddTask,\r\n            task: task,\r\n        }\r\n\r\n        dispatch(hS)\r\n        //Clean the input box\r\n        setValue('')\r\n    }\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}\r\n        >\r\n            <input\r\n                className=\"input-user\"\r\n                type=\"text\"\r\n                placeholder=\"Add a new task\"\r\n                value={value}\r\n                //name: Specifies the name of an <input> element\r\n                name=\"task\"\r\n                autoComplete=\"off\"\r\n                maxLength={30}\r\n                onChange={handleChange}\r\n            />\r\n            <button>Add Task</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FormUser\r\n","import React, { useState } from 'react'\r\nimport Task, { colorsItems } from '../models/Task'\r\nimport { FaTrash, FaEdit } from \"react-icons/fa\"\r\nimport { IconContext } from 'react-icons/lib'\r\nimport { Action, HandleState, tasksObject } from './App'\r\nimport * as ls from \"local-storage\";\r\n\r\n\r\nconst TaskList = ({ list, dispatch }: { list: Task[], dispatch: React.Dispatch<HandleState> }) => {\r\n\r\n    //Saving the current state list\r\n    ls.set<Task[]>(tasksObject, list);\r\n\r\n    const itemBase = (item: Task) =>\r\n        (<div className=\"row\">\r\n            <div className=\"block\"> <p>{item.description}</p></div>\r\n            <div className=\"block-right\" onClick={() => onClickDelete(item, dispatch)}>{getIconCustom(<FaTrash />, \"white\")}</div>\r\n            <div className=\"block-right\" onClick={() => onClickEdit(item, dispatch)}>{getIconCustom(<FaEdit />, \"white\")}</div>\r\n        </div>)\r\n\r\n    //Component inside a compoen should be Capitalizedl\r\n\r\n\r\n\r\n    const ItemEdit = (item: Task) => {\r\n\r\n        const [value, setValue] = useState(item.description)\r\n\r\n\r\n        const handleChange = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n            setValue(e.target.value)\r\n\r\n\r\n\r\n        const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n            //Avoid to refresh the page\r\n            e.preventDefault()\r\n\r\n            if (value.length === 0)\r\n                return\r\n\r\n            const task = item.copyWith({\r\n                description: value,\r\n                isEditing: false\r\n            })\r\n\r\n            const hS: HandleState = {\r\n                action: Action.EditTask,\r\n                task: task,\r\n            }\r\n\r\n            dispatch(hS)\r\n            //Clean the input box\r\n            setValue('')\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        className=\"input-edit\"\r\n                        type=\"text\"\r\n                        placeholder=\"Edit task\"\r\n                        value={value}\r\n                        //name: Specifies the name of an <input> element\r\n                        name=\"task\"\r\n                        autoComplete=\"off\"\r\n                        maxLength={30}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <button\r\n                        className=\"button-edit\"\r\n                    >Edit Task</button>\r\n                </form>\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        //Using a Fragment mode short without properties\r\n        <>\r\n            <ul >\r\n                {list.map((item, i, tasks) => {\r\n\r\n                    //item.getPosColorUnque(i, tasks);\r\n\r\n                    const listColors = getListColors(item, i, tasks)\r\n\r\n\r\n                    return <li style={{ backgroundImage: `linear-gradient(to right, ${listColors[0]}, ${listColors[1]}` }}\r\n                        key={item.id}>\r\n\r\n                        {/* This div contains the row to show when is in state base */}\r\n                        {/* Try to use the same classes */}\r\n                        {item.isEditing === false ? itemBase(item) : ItemEdit(item)}\r\n\r\n                    </li>\r\n                })}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction onClickEdit(i: Task, dispatch: any) {\r\n\r\n    const item = i.copyWith({\r\n        isEditing: !i.isEditing\r\n    })\r\n\r\n    const hS: HandleState = {\r\n        action: Action.EditTask,\r\n        task: item,\r\n    }\r\n    dispatch(hS)\r\n\r\n}\r\n\r\nfunction onClickDelete(item: Task, dispatch: any) {\r\n    const hS: HandleState = {\r\n        action: Action.DeleteTask,\r\n        task: item,\r\n    }\r\n    dispatch(hS)\r\n}\r\n\r\n\r\n\r\nfunction getListColors(item: Task, i: number, tasks: Task[]): string[] {\r\n\r\n    const currentColor = item.hexColorPos;\r\n\r\n    const listColors = (pos: number) => colorsItems[pos]\r\n\r\n    //First item\r\n    if (i === 0)\r\n        return listColors(currentColor)\r\n\r\n\r\n    //Color used in previous task\r\n    const colorPosUsed = tasks[i - 1].hexColorPos\r\n\r\n    if (colorPosUsed !== currentColor)\r\n        return listColors(currentColor)\r\n\r\n    //Are the same color\r\n    if (currentColor === colorsItems.length - 1)\r\n        return listColors(item.getColorPosition(colorPosUsed))\r\n\r\n    return listColors(item.getColorPosition(colorPosUsed))\r\n\r\n}\r\n\r\n\r\n\r\nfunction getIconCustom(icon: JSX.Element, color: string): JSX.Element {\r\n    return (<IconContext.Provider value={{ color: color, size: \"1.25em\" }}>\r\n        <div>\r\n            {icon}\r\n        </div>\r\n    </IconContext.Provider>)\r\n}\r\n\r\nexport default TaskList\r\n","//NOTE: In React all is is split in components to make hS better UI experience \nimport React, { useReducer } from 'react';\nimport Task from '../models/Task';\nimport FormUser from './Form';\nimport TaskList from './TaskList';\n//Read the storage from the browsers\nimport * as ls from \"local-storage\";\n\ntype State = {\n  list: Task[]\n}\n\nexport const tasksObject = 'tasks'\n\nexport type HandleState = {\n  action: Action,\n  task: Task,\n}\n\nexport enum Action {\n  AddTask,\n  DeleteTask,\n  EditTask,\n}\n\n\n\n\n//Handles the state about the UI\n//state: Current state\nconst reducer = (state: State, hS: HandleState): State => {\n\n  const currentList = state.list\n  const { action, task } = hS\n\n  //split docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n  switch (action) {\n    case Action.AddTask:\n      //Return the list with the new task\n      return {\n        list: [...currentList, task],\n      }\n    case Action.DeleteTask:\n\n      const index = currentList.findIndex(item => item.id === task.id)\n\n      if (index < 0) {\n        //No changes\n        console.log('The item cannot be found')\n        //Return the same list\n        return {\n          list: [...currentList],\n        }\n      }\n      //Remove 1 element at `index`\n      currentList.splice(index, 1)\n\n      return {\n        list: [...currentList],\n      }\n    case Action.EditTask:\n      //Find the task\n      const indexEdit = currentList.findIndex(item => item.id === task.id)\n      if (indexEdit < 0) {\n        //No changes\n        console.log('The item cannot be found')\n        //Return the same list\n        return {\n          list: [...currentList],\n        }\n      }\n      //Remove 1 element at `indexEdit`, and insert \"task\"\n      currentList.splice(indexEdit, 1, task)\n      //Return the list updated\n      return {\n        list: [...currentList],\n      }\n    default:\n      throw new Error('Action missing. Please update the Action enum')\n  }\n}\n\nfunction App() {\n\n  let defaultValue: Task[] = []\n\n  const fromStorage = ls.get<Task[]>(tasksObject)\n\n  if (fromStorage) {\n\n    const tasksToUse: Task[] = []\n\n    console.log('From list');\n    console.log(fromStorage);\n    console.log('Reading list');\n    fromStorage.forEach(task => {\n      tasksToUse.push(new Task(task.id, task.description))\n    })\n\n    defaultValue = tasksToUse\n\n  }\n  //This reducer only handles this type\n  const initialState: State = {\n    // list: []\n    list: defaultValue\n  }\n\n  const [{ list }, dispatch] = useReducer(reducer, initialState)\n\n  console.log('This is the initial value')\n  console.log(initialState)\n\n  return (\n    <div className=\"container-main\">\n      <h2>What's the Plan for Today</h2>\n      <br />\n      {/* Allow to enter the new tasks */}\n      <FormUser dispatch={dispatch} />\n      <br />\n      {/* Allow to see the task,deletes and edits */}\n      <TaskList list={list} dispatch={dispatch} />\n    </div>\n  )\n}\n\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n//Using the css to give style to the main index page (html)\n//TODO: Change this path to current\nimport './styles/css/index.css';\n/**\n * Run the application\n * \n */\n\nReactDOM.render(\n  //This tag will show warn if there is some bad practice in the console\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}